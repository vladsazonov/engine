[{"D:\\vs-code-projects\\business-eng\\is\\src\\ui\\components\\App.js":"1","D:\\vs-code-projects\\business-eng\\is\\src\\index.js":"2","D:\\vs-code-projects\\business-eng\\is\\src\\ui\\components\\main-page\\main-page.jsx":"3","D:\\vs-code-projects\\business-eng\\is\\src\\ui\\components\\stepper\\stepper.jsx":"4","D:\\vs-code-projects\\business-eng\\is\\src\\ui\\components\\accept-dialog\\accept-dialog.jsx":"5","D:\\vs-code-projects\\business-eng\\is\\src\\ui\\components\\step\\step.tsx":"6","D:\\vs-code-projects\\business-eng\\is\\src\\ui\\components\\home\\home.tsx":"7","D:\\vs-code-projects\\business-eng\\is\\src\\ui\\components\\choice\\choice.tsx":"8","D:\\vs-code-projects\\business-eng\\is\\src\\ui\\components\\finish\\finish.tsx":"9"},{"size":549,"mtime":1608399275397,"results":"10","hashOfConfig":"11"},{"size":235,"mtime":1606474256877,"results":"12","hashOfConfig":"13"},{"size":11395,"mtime":1607867094474,"results":"14","hashOfConfig":"13"},{"size":10480,"mtime":1608060018229,"results":"15","hashOfConfig":"13"},{"size":1878,"mtime":1608059978289,"results":"16","hashOfConfig":"13"},{"size":2913,"mtime":1608399760208,"results":"17","hashOfConfig":"11"},{"size":2044,"mtime":1608399479608,"results":"18","hashOfConfig":"11"},{"size":2686,"mtime":1608399646391,"results":"19","hashOfConfig":"11"},{"size":2412,"mtime":1608399673853,"results":"20","hashOfConfig":"11"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ndi6wn",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xjhr5x",{"filePath":"25","messages":"26","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\vs-code-projects\\business-eng\\is\\src\\ui\\components\\App.js",[],"D:\\vs-code-projects\\business-eng\\is\\src\\index.js",[],"D:\\vs-code-projects\\business-eng\\is\\src\\ui\\components\\main-page\\main-page.jsx",["41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67"],"import React, { useState } from 'react';\r\n\r\nimport {\r\n  Button,\r\n  Grid,\r\n  List,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  ListItem,\r\n  TextField,\r\n  DialogContentText,\r\n} from '@material-ui/core';\r\n\r\nimport VerticalLinearStepper from '../stepper/stepper'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n      width: '25ch',\r\n    },\r\n  },\r\n}));\r\n\r\nfunction MainPage() {\r\n  const classes = useStyles();\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [isJsonOpened, setIsJsonOpened] = useState(false);\r\n  const [isJsonLoaded, setSsJsonLoaded] = useState(false);\r\n  const [isResult, setIsResult] = useState(false);\r\n  const [users, setUsers] = useState([]);\r\n  const [json, setJson] = useState(null);\r\n  const [text, setText] = useState('');\r\n  const [userContext, setUserContext] = useState({\r\n    user: null,\r\n    document: false,\r\n  });\r\n\r\n  const createUsersArray = (elem) => {\r\n    return Array.from(new Set(elem));\r\n  };\r\n\r\n  const extractUsers = () => {\r\n    const users = json.accepting.flatMap((accept) =>\r\n      accept.users.map((elem) => elem.user)\r\n    );\r\n\r\n    return createUsersArray(users);\r\n  };\r\n\r\n  const isPrevStepsOk = (user) => {\r\n    let stateIndex = null;\r\n    let i = 0;\r\n\r\n    for (let match of json.accepting) {\r\n      if (\r\n        match.users.some((elem) => elem.user === user && elem.result === null)\r\n      ) {\r\n        stateIndex = i;\r\n        break;\r\n      }\r\n      i++;\r\n    }\r\n\r\n    if (stateIndex === null) {\r\n      return false;\r\n    }\r\n\r\n    i = 0;\r\n\r\n    for (let match of json.accepting) {\r\n      if (match.users.some((user) => user.result === null) && i < stateIndex) {\r\n        return false;\r\n      }\r\n      i++;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const checkAccepting = (accepting) => {\r\n    if (accepting.condition === 'or') {\r\n      return accepting.users.some((user) => user.result === true);\r\n    } else if (accepting.condition === 'and') {\r\n      return accepting.users.every((user) => user.result === true);\r\n    } else {\r\n      return accepting.users.every((user) => user.result === true);\r\n    }\r\n  };\r\n\r\n  const handleClickOpen = (user) => {\r\n    const isOk = isPrevStepsOk(user);\r\n\r\n    for (let elem of json.accepting) {\r\n      let foundedUser = elem.users.find((e) => e.user === user);\r\n\r\n      if (foundedUser) {\r\n        if (foundedUser.result !== null) continue;\r\n        else {\r\n          if (isOk) {\r\n            setOpen(true);\r\n            setUserContext({ foundedUser, document: true });\r\n            return;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    setOpen(true);\r\n    setUserContext({ user, document: false });\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    if (tryParseJSON(event.target.value)) {\r\n      const parsedJson = JSON.parse(event.target.value);\r\n\r\n      setText(event.target.value);\r\n      setJson(parsedJson);\r\n    } else {\r\n      setText(event.target.value);\r\n    }\r\n  };\r\n\r\n  const tryParseJSON = (jsonString) => {\r\n    try {\r\n      const o = JSON.parse(jsonString);\r\n\r\n      if (o && typeof o === 'object') {\r\n        return o;\r\n      }\r\n    } catch (e) {}\r\n\r\n    return false;\r\n  };\r\n\r\n  const loadJSON = () => {\r\n    setSsJsonLoaded(true);\r\n  };\r\n\r\n  const onOpenJson = () => {\r\n    setIsJsonOpened((prevState) => ({\r\n      isJsonLoaded: !prevState,\r\n    }));\r\n  };\r\n\r\n  const answerUser = (answer) => {\r\n    for (let elem of json.accepting) {\r\n      let u = elem.users.find(\r\n        (elem) => elem.user === userContext.user && elem.result === null\r\n      );\r\n      if (u) {\r\n        u.result = answer === 'accept';\r\n        break;\r\n      }\r\n    }\r\n    procTest();\r\n    handleClose();\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleCloseResult = () => {\r\n    setIsResult(false);\r\n  };\r\n\r\n  const procTest = () => {\r\n    let fail = false;\r\n\r\n    for (let elem of json.accepting) {\r\n      if (elem.condition === 'or') {\r\n        let u = elem.users.some((elem) => elem.result === true);\r\n        if (!u) {\r\n          fail = true;\r\n          elem.result = false;\r\n        } else {\r\n          elem.result = true;\r\n        }\r\n        continue;\r\n      }\r\n      if (elem.condition === 'and') {\r\n        let u = elem.users.every((elem) => elem.result === true);\r\n        if (!u) {\r\n          fail = true;\r\n          elem.result = false;\r\n        } else {\r\n          elem.result = true;\r\n        }\r\n      } else {\r\n        let u = elem.users.every((elem) => elem.result === true);\r\n        if (!u) {\r\n          fail = true;\r\n          elem.result = false;\r\n        } else {\r\n          elem.result = true;\r\n        }\r\n      }\r\n    }\r\n    return fail;\r\n  };\r\n\r\n  const doneTest = () => {\r\n    const fail = procTest();\r\n\r\n    if (fail) {\r\n      json.result = false;\r\n    } else {\r\n      json.result = true;\r\n    }\r\n    setIsResult(true);\r\n  };\r\n\r\n  return (\r\n    <VerticalLinearStepper/>\r\n    // <Grid>\r\n    //   {isJsonLoaded ? (\r\n    //     <Grid>\r\n    //       <div>\r\n    //         <div>\r\n    //           {/* <h3>{json.document}</h3> */}\r\n    //           <Button onClick={() => doneTest()}>\r\n    //             Display the final document\r\n    //           </Button>\r\n    //           <h2>User list</h2>\r\n    //         </div>\r\n\r\n    //         <List component='nav' className={classes.root}>\r\n    //           {extractUsers().map((user) => (\r\n    //             <Button\r\n    //               className={classes.button}\r\n    //               onClick={() => {\r\n    //                 handleClickOpen(user);\r\n    //               }}\r\n    //             >\r\n    //               {user}\r\n    //             </Button>\r\n    //           ))}\r\n    //         </List>\r\n\r\n    //         <Dialog\r\n    //           open={open}\r\n    //           onClose={handleClose}\r\n    //           prev_steps_ok\r\n    //           style={{ backgroundColor: '#000' }}\r\n    //         >\r\n    //           {userContext.document ? (\r\n    //             <DialogTitle id='alert-dialog-title'>\r\n    //               {'User: ' + userContext.user}\r\n    //             </DialogTitle>\r\n    //           ) : (\r\n    //             <DialogContent>No documents available</DialogContent>\r\n    //           )}\r\n    //           {userContext.document ? (\r\n    //             <DialogActions>\r\n    //               <Button onClick={() => answerUser('reject')}>Reject</Button>\r\n    //               <Button onClick={() => answerUser('accept')}>Accept</Button>\r\n    //             </DialogActions>\r\n    //           ) : (\r\n    //             <ListItem onClick={handleClose}></ListItem>\r\n    //           )}\r\n    //         </Dialog>\r\n    //         <Dialog\r\n    //           style={{ backgroundColor: '#000' }}\r\n    //           onClose={() => handleCloseResult()}\r\n    //           open={isResult}\r\n    //         >\r\n    //           <DialogContent>\r\n    //             <DialogContentText>\r\n    //               <h4>\r\n    //                 {json.result ? 'Document accepted' : 'Document rejected'}\r\n    //               </h4>\r\n    //             </DialogContentText>\r\n    //             <TextField\r\n    //               value={JSON.stringify(json, null, 3)}\r\n    //               multiline={true}\r\n    //               id='name'\r\n    //             />\r\n    //           </DialogContent>\r\n    //           <DialogActions>\r\n    //             <Button onClick={() => handleCloseResult()}>Cancel</Button>\r\n    //           </DialogActions>\r\n    //         </Dialog>\r\n    //       </div>\r\n    //     </Grid>\r\n    //   ) : (\r\n    //     <div>\r\n    //       <Dialog style={{ backgroundColor: '#000' }} open={!isJsonOpened}>\r\n    //         <DialogContent>\r\n    //           <DialogContentText>Insert JSON</DialogContentText>\r\n    //           <TextField\r\n    //             value={text}\r\n    //             onChange={onChange}\r\n    //             multiline={true}\r\n    //             id='name'\r\n    //           />\r\n    //         </DialogContent>\r\n    //         <DialogActions>\r\n    //           <Button onClick={onOpenJson}>Cancel</Button>\r\n    //           <Button onClick={loadJSON}>Upload</Button>\r\n    //         </DialogActions>\r\n    //       </Dialog>\r\n    //     </div>\r\n    //   )}\r\n    // </Grid>\r\n\r\n    // <Grid>\r\n    //   {isJsonLoaded ? (\r\n    //     <Grid>\r\n    //       <div>\r\n    //         <div>\r\n    //           {/* <h3>{json.document}</h3> */}\r\n    //           <Button onClick={doneTest}>Display the final document</Button>\r\n    //           <h2>User list</h2>\r\n    //         </div>\r\n\r\n    //         <List component='nav' className={classes.root}>\r\n    //           {extractUsers().map((user) => (\r\n    //             <Button\r\n    //               className={classes.button}\r\n    //               onClick={() => {\r\n    //                 handleClickOpen(user);\r\n    //               }}\r\n    //             >\r\n    //               {user}\r\n    //             </Button>\r\n    //           ))}\r\n    //         </List>\r\n\r\n    //         <Dialog\r\n    //           open={open}\r\n    //           onClose={handleClose}\r\n    //           isPrevStepsOk\r\n    //           style={{ backgroundColor: '#000' }}\r\n    //         >\r\n    //           {userContext.document ? (\r\n    //             <DialogTitle>{'User: ' + userContext.user}</DialogTitle>\r\n    //           ) : (\r\n    //             <DialogContent>No documents available</DialogContent>\r\n    //           )}\r\n    //           {userContext.document ? (\r\n    //             <DialogActions>\r\n    //               <Button onClick={() => answerUser('reject')}>Reject</Button>\r\n    //               <Button onClick={() => answerUser('accept')}>Accept</Button>\r\n    //             </DialogActions>\r\n    //           ) : (\r\n    //             <ListItem onClick={handleClose}></ListItem>\r\n    //           )}\r\n    //         </Dialog>\r\n    //         <Dialog\r\n    //           style={{ backgroundColor: '#000' }}\r\n    //           onClose={() => handleCloseResult()}\r\n    //           open={isResult}\r\n    //         >\r\n    //           <DialogContent>\r\n    //             <DialogContentText>\r\n    //               <h4>\r\n    //                 {json.result ? 'Document accepted' : 'Document rejected'}\r\n    //               </h4>\r\n    //             </DialogContentText>\r\n    //             <TextField value={JSON.stringify(json, null, 3)} multiline />\r\n    //           </DialogContent>\r\n    //           <DialogActions>\r\n    //             <Button onClick={() => handleCloseResult()}>Cancel</Button>\r\n    //           </DialogActions>\r\n    //         </Dialog>\r\n    //       </div>\r\n    //     </Grid>\r\n    //   ) : (\r\n    //     <div>\r\n    //       <Dialog style={{ backgroundColor: '#000' }} open={!isJsonOpened}>\r\n    //         <DialogContent>\r\n    //           <DialogContentText>Insert JSON</DialogContentText>\r\n    //           <TextField\r\n    //             variant='outlined'\r\n    //             multiline\r\n    //             label='Вставьте JSON'\r\n    //             value={text}\r\n    //             onChange={onChange}\r\n    //             rowsMax={6}\r\n    //           />\r\n    //         </DialogContent>\r\n    //         <DialogActions>\r\n    //           <Button onClick={onOpenJson}>Cancel</Button>\r\n    //           <Button onClick={loadJSON}>Upload</Button>\r\n    //         </DialogActions>\r\n    //       </Dialog>\r\n    //     </div>\r\n    //   )}\r\n    // </Grid>\r\n  );\r\n}\r\n\r\nexport default MainPage;\r\n","D:\\vs-code-projects\\business-eng\\is\\src\\ui\\components\\stepper\\stepper.jsx",[],"D:\\vs-code-projects\\business-eng\\is\\src\\ui\\components\\accept-dialog\\accept-dialog.jsx",["68"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport { blue } from '@material-ui/core/colors';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\n\r\nconst useStyles = makeStyles({\r\n  avatar: {\r\n    backgroundColor: blue[100],\r\n    color: blue[600]\r\n  },\r\n  buttons: {\r\n    display: 'flex',\r\n    width: '100%'\r\n  },\r\n  button: {\r\n    margin: '2px 4px'\r\n  }\r\n});\r\n\r\nexport default function AcceptDialog(props) {\r\n  const classes = useStyles();\r\n  const { onClose, open, clickedUser } = props;\r\n\r\n  const handleClose = () => {\r\n    onClose(clickedUser);\r\n  };\r\n\r\n  const handleListItemClick = value => {\r\n    const user = clickedUser;\r\n\r\n    user.result = value;\r\n    onClose(user);\r\n  };\r\n\r\n  return (\r\n    <Dialog onClose={handleClose} open={open}>\r\n      <DialogTitle id=\"simple-dialog-title\">Примите решение</DialogTitle>\r\n\r\n      <DialogContent>\r\n        <DialogContentText id=\"alert-dialog-description\">\r\n          Пользователь: {clickedUser && clickedUser.name}\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button color=\"secondary\" onClick={() => handleListItemClick(false)}>\r\n          Отклонить\r\n        </Button>\r\n        <Button color=\"primary\" onClick={() => handleListItemClick(true)}>\r\n          Принять\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nAcceptDialog.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  open: PropTypes.bool.isRequired,\r\n  clickedUser: PropTypes.any\r\n};\r\n","D:\\vs-code-projects\\business-eng\\is\\src\\ui\\components\\step\\step.tsx",[],"D:\\vs-code-projects\\business-eng\\is\\src\\ui\\components\\home\\home.tsx",[],"D:\\vs-code-projects\\business-eng\\is\\src\\ui\\components\\choice\\choice.tsx",[],"D:\\vs-code-projects\\business-eng\\is\\src\\ui\\components\\finish\\finish.tsx",[],{"ruleId":"69","severity":1,"message":"70","line":4,"column":3,"nodeType":"71","messageId":"72","endLine":4,"endColumn":9},{"ruleId":"69","severity":1,"message":"73","line":5,"column":3,"nodeType":"71","messageId":"72","endLine":5,"endColumn":7},{"ruleId":"69","severity":1,"message":"74","line":6,"column":3,"nodeType":"71","messageId":"72","endLine":6,"endColumn":7},{"ruleId":"69","severity":1,"message":"75","line":7,"column":3,"nodeType":"71","messageId":"72","endLine":7,"endColumn":9},{"ruleId":"69","severity":1,"message":"76","line":8,"column":3,"nodeType":"71","messageId":"72","endLine":8,"endColumn":14},{"ruleId":"69","severity":1,"message":"77","line":9,"column":3,"nodeType":"71","messageId":"72","endLine":9,"endColumn":16},{"ruleId":"69","severity":1,"message":"78","line":10,"column":3,"nodeType":"71","messageId":"72","endLine":10,"endColumn":16},{"ruleId":"69","severity":1,"message":"79","line":11,"column":3,"nodeType":"71","messageId":"72","endLine":11,"endColumn":11},{"ruleId":"69","severity":1,"message":"80","line":12,"column":3,"nodeType":"71","messageId":"72","endLine":12,"endColumn":12},{"ruleId":"69","severity":1,"message":"81","line":13,"column":3,"nodeType":"71","messageId":"72","endLine":13,"endColumn":20},{"ruleId":"69","severity":1,"message":"82","line":30,"column":9,"nodeType":"71","messageId":"72","endLine":30,"endColumn":16},{"ruleId":"69","severity":1,"message":"83","line":32,"column":10,"nodeType":"71","messageId":"72","endLine":32,"endColumn":14},{"ruleId":"69","severity":1,"message":"84","line":33,"column":10,"nodeType":"71","messageId":"72","endLine":33,"endColumn":22},{"ruleId":"69","severity":1,"message":"85","line":34,"column":10,"nodeType":"71","messageId":"72","endLine":34,"endColumn":22},{"ruleId":"69","severity":1,"message":"86","line":35,"column":10,"nodeType":"71","messageId":"72","endLine":35,"endColumn":18},{"ruleId":"69","severity":1,"message":"87","line":36,"column":10,"nodeType":"71","messageId":"72","endLine":36,"endColumn":15},{"ruleId":"69","severity":1,"message":"88","line":36,"column":17,"nodeType":"71","messageId":"72","endLine":36,"endColumn":25},{"ruleId":"69","severity":1,"message":"89","line":38,"column":10,"nodeType":"71","messageId":"72","endLine":38,"endColumn":14},{"ruleId":"69","severity":1,"message":"90","line":48,"column":9,"nodeType":"71","messageId":"72","endLine":48,"endColumn":21},{"ruleId":"69","severity":1,"message":"91","line":85,"column":9,"nodeType":"71","messageId":"72","endLine":85,"endColumn":23},{"ruleId":"69","severity":1,"message":"92","line":95,"column":9,"nodeType":"71","messageId":"72","endLine":95,"endColumn":24},{"ruleId":"69","severity":1,"message":"93","line":117,"column":9,"nodeType":"71","messageId":"72","endLine":117,"endColumn":17},{"ruleId":"69","severity":1,"message":"94","line":140,"column":9,"nodeType":"71","messageId":"72","endLine":140,"endColumn":17},{"ruleId":"69","severity":1,"message":"95","line":144,"column":9,"nodeType":"71","messageId":"72","endLine":144,"endColumn":19},{"ruleId":"69","severity":1,"message":"96","line":150,"column":9,"nodeType":"71","messageId":"72","endLine":150,"endColumn":19},{"ruleId":"69","severity":1,"message":"97","line":168,"column":9,"nodeType":"71","messageId":"72","endLine":168,"endColumn":26},{"ruleId":"69","severity":1,"message":"98","line":207,"column":9,"nodeType":"71","messageId":"72","endLine":207,"endColumn":17},{"ruleId":"69","severity":1,"message":"82","line":27,"column":9,"nodeType":"71","messageId":"72","endLine":27,"endColumn":16},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'Grid' is defined but never used.","'List' is defined but never used.","'Dialog' is defined but never used.","'DialogTitle' is defined but never used.","'DialogContent' is defined but never used.","'DialogActions' is defined but never used.","'ListItem' is defined but never used.","'TextField' is defined but never used.","'DialogContentText' is defined but never used.","'classes' is assigned a value but never used.","'open' is assigned a value but never used.","'isJsonOpened' is assigned a value but never used.","'isJsonLoaded' is assigned a value but never used.","'isResult' is assigned a value but never used.","'users' is assigned a value but never used.","'setUsers' is assigned a value but never used.","'text' is assigned a value but never used.","'extractUsers' is assigned a value but never used.","'checkAccepting' is assigned a value but never used.","'handleClickOpen' is assigned a value but never used.","'onChange' is assigned a value but never used.","'loadJSON' is assigned a value but never used.","'onOpenJson' is assigned a value but never used.","'answerUser' is assigned a value but never used.","'handleCloseResult' is assigned a value but never used.","'doneTest' is assigned a value but never used."]